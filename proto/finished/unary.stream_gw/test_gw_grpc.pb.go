// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test_gw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestProtoClient is the client API for TestProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestProtoClient interface {
	GetValue(ctx context.Context, in *FirstValue, opts ...grpc.CallOption) (*SecondValue, error)
	GetStreamValue(ctx context.Context, in *FirstValue, opts ...grpc.CallOption) (TestProto_GetStreamValueClient, error)
}

type testProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewTestProtoClient(cc grpc.ClientConnInterface) TestProtoClient {
	return &testProtoClient{cc}
}

func (c *testProtoClient) GetValue(ctx context.Context, in *FirstValue, opts ...grpc.CallOption) (*SecondValue, error) {
	out := new(SecondValue)
	err := c.cc.Invoke(ctx, "/test_gw.TestProto/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testProtoClient) GetStreamValue(ctx context.Context, in *FirstValue, opts ...grpc.CallOption) (TestProto_GetStreamValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestProto_ServiceDesc.Streams[0], "/test_gw.TestProto/GetStreamValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &testProtoGetStreamValueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestProto_GetStreamValueClient interface {
	Recv() (*SecondValue, error)
	grpc.ClientStream
}

type testProtoGetStreamValueClient struct {
	grpc.ClientStream
}

func (x *testProtoGetStreamValueClient) Recv() (*SecondValue, error) {
	m := new(SecondValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestProtoServer is the server API for TestProto service.
// All implementations must embed UnimplementedTestProtoServer
// for forward compatibility
type TestProtoServer interface {
	GetValue(context.Context, *FirstValue) (*SecondValue, error)
	GetStreamValue(*FirstValue, TestProto_GetStreamValueServer) error
	mustEmbedUnimplementedTestProtoServer()
}

// UnimplementedTestProtoServer must be embedded to have forward compatible implementations.
type UnimplementedTestProtoServer struct {
}

func (UnimplementedTestProtoServer) GetValue(context.Context, *FirstValue) (*SecondValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedTestProtoServer) GetStreamValue(*FirstValue, TestProto_GetStreamValueServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamValue not implemented")
}
func (UnimplementedTestProtoServer) mustEmbedUnimplementedTestProtoServer() {}

// UnsafeTestProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestProtoServer will
// result in compilation errors.
type UnsafeTestProtoServer interface {
	mustEmbedUnimplementedTestProtoServer()
}

func RegisterTestProtoServer(s grpc.ServiceRegistrar, srv TestProtoServer) {
	s.RegisterService(&TestProto_ServiceDesc, srv)
}

func _TestProto_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirstValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestProtoServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_gw.TestProto/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestProtoServer).GetValue(ctx, req.(*FirstValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestProto_GetStreamValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FirstValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestProtoServer).GetStreamValue(m, &testProtoGetStreamValueServer{stream})
}

type TestProto_GetStreamValueServer interface {
	Send(*SecondValue) error
	grpc.ServerStream
}

type testProtoGetStreamValueServer struct {
	grpc.ServerStream
}

func (x *testProtoGetStreamValueServer) Send(m *SecondValue) error {
	return x.ServerStream.SendMsg(m)
}

// TestProto_ServiceDesc is the grpc.ServiceDesc for TestProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test_gw.TestProto",
	HandlerType: (*TestProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _TestProto_GetValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamValue",
			Handler:       _TestProto_GetStreamValue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test_gw.proto",
}
